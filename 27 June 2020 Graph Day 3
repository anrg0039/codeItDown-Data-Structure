//Common Friends
#include <bits/stdc++.h>
using namespace std;
class Graph{
    unordered_map<string,vector<string>> map;
    public:
    void addedge(string a,string b)
    {
        map[a].push_back(b);
        map[b].push_back(a);
    }
    bool check(string a,string b)
    {
        queue<string> q;
        unordered_map<string,bool> visited;
        q.push(a);
        while(!q.empty())
        {
            string d = q.front();
            visited[d] = true;
            if(d == b)
            {
                return true;
            }
            q.pop();
            for(auto x: map[d])
            {
                if(!visited[x])
                {
                    q.push(x);
                }
            }
        }
        return false;
    }
    void checkfriends(string a,string b)
    {
        if(check(a,b))
        {
            cout<<a<<" and "<<b<<" are friends\n";
        }else
        {
            cout<<a<<" and "<<b<<" are not friends\n";
        }
    }

};
int main() {
    Graph g;
    g.addedge("Rahul","Ankit");
    g.addedge("Amit","Ankit");
    g.addedge("Aryan","Shrey");
    g.addedge("Sahadev","Aryan");
    g.addedge("Smit","ABC");
    g.checkfriends("Amit","Ankit");
}
//Number of connected components
#include <bits/stdc++.h>
using namespace std;
class Graph{
    unordered_map<int,vector<int>> map;
    public:
    void addedge(int a,int b,bool bi = true)
    {
        map[a].push_back(b);
        if(bi)
        {
            map[b].push_back(a);
        }
    }

    void DFS(unordered_map<int,bool> &visited, int st)
    {
        visited[st]= true;
        for(auto x: map[st])
        {
            if(!visited[x])
            {
                DFS(visited,x);
            }
        }
    }

    void connected()
    {
        int count = 0;
        unordered_map<int,bool> visited;
        for(auto x: map)
        {
            if(!visited[x.first])
            {
                count++;
                DFS(visited,x.first);
            }
        }
        cout<<"Number of connected components: "<<count<<"\n";
    }
    
};
int main() {
    Graph g;
    g.addedge(0,1);
    g.addedge(0,2);
    g.addedge(2,10);
    g.addedge(3,4);
    g.addedge(4,5);
    g.addedge(6,7);
    g.connected();
}
//Detecting and printing the data of the cycle
#include <bits/stdc++.h>
using namespace std;
class Graph{
    unordered_map<int,vector<int>> map;
    public:
    void addedge(int a, int b)
    {
        map[a].push_back(b);
        map[b].push_back(a);
    }

    void printcycle()
    {
        unordered_map<int,bool> visited;
        queue<int> q;
        for(auto x:map)
        {
            if(x.second.size()==1)
            {
                visited[x.first]= true;
                q.push(x.first);
            }
        }
        while(!q.empty())
        {
            int d = q.front();
            for(auto x:map[d])
            {
                map[x].pop_back();

                if(map[x].size() == 1)
                {
                    visited[x] = true;
                    q.push(x);
                }

            }

            q.pop();

            map[d].pop_back();
        }

        cout<<"Printing the nodes that are involved in the cycle: ";
        for(auto x:map)
        {
            if(!visited[x.first])
            {
                cout<<x.first<<" ";
            }
        }
    }


};
int main() {
    Graph g;
    g.addedge(0,1);
    g.addedge(1,2);
    g.addedge(2,0);
    g.addedge(1,3);
    g.addedge(3,4);
    g.addedge(2,4);

    g.addedge(6,7);
    g.addedge(7,8);
    g.addedge(8,6);

    g.printcycle();
    
}

