#include <iostream>
using namespace std;
void print(int dp[6][6])
{
    for(int i=0;i<6;i++)
    {
        for(int j=0;j<6;j++)
        {
            cout<<dp[i][j]<<" "
        }
        cout<<"\n";
    }

    cout<<"--------------------\n";

}
int LCS(string s1, string s2,int a,int b,int dp[6][6])
{
    if(a==0||b==0)
    {
        return 0;
    }
    if(s1[a-1] == s2[b-1])
    {
        if(dp[a-1][b-1]==-1)
        {
            dp[a-1][b-1] =  LCS(s1,s2,a-1,b-1,dp);
            
        }
        dp[a][b]= 1+dp[a-1][b-1];
        print(dp);
            return dp[a][b];
        
    }
    else
    {
        if(dp[a][b-1]== -1)
        {
            dp[a][b-1] = LCS(s1,s2,a,b-1,dp);
        }
        if(dp[a-1][b]== -1)
        {
            dp[a-1][b] = LCS(s1,s2,a-1,b,dp);
        }
        dp[a][b] =  max(dp[a][b-1],dp[a-1][b]);
        print(dp);
        return dp[a][b];
    }
}
int main() {
    
    string s1,s2;
    cin>>s1>>s2;
    int a = s1.size();
    int b = s2.size();
    int dp[6][6];
    memset(dp,-1,sizeof(dp));
    cout<<"Length of Longest Common SubSequence: "<<LCS(s1,s2,s1.size(),s2.size(),dp);
}
